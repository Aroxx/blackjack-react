{"version":3,"sources":["components/Cards/deck.js","components/Cards/Card/Card.js","components/Cards/Cards.js","components/Bank/Bank.js","components/Controls/Controls.js","components/Results/ResultsMessage/ResultsMessage.js","components/Results/Scores/Scores.js","components/Results/GameOver/GameOverModal.js","App.js","index.js"],"names":["cardValues","cardBack","aceClubs","twoClubs","threeClubs","fourClubs","fiveClubs","sixClubs","sevenClubs","eightClubs","nineClubs","tenClubs","jackClubs","queenClubs","kingClubs","aceSpades","twoSpades","threeSpades","fourSpades","fiveSpades","sixSpades","sevenSpades","eightSpades","nineSpades","tenSpades","jackSpades","queenSpades","kingSpades","aceHearts","twoHearts","threeHearts","fourHearts","fiveHearts","sixHearts","sevenHearts","eightHearts","nineHearts","tenHearts","jackHearts","queenHearts","kingHearts","aceDiamonds","twoDiamonds","threeDiamonds","fourDiamonds","fiveDiamonds","sixDiamonds","sevenDiamonds","eightDiamonds","nineDiamonds","tenDiamonds","jackDiamonds","queenDiamonds","kingDiamonds","newDeck","aces","Card","props","className","card","Cards","Row","lg","style","padding","Col","dealerHand","map","Math","floor","random","playerHand","Bank","span","offset","playerBank","currentPot","InputGroup","size","Prepend","Button","variant","isValid","handDealt","onClick","submitBet","disabled","FormControl","placeholder","aria-label","value","betInput","onChange","event","inputChangedHandler","Controls","buttonStyle","margin","deal","playerStand","hit","playDealer","dealerHidden","reset","Message","playerResult","dealerResult","playerStyle","dealerStyle","playerBusted","dealerBusted","result","Scores","dealerScore","playerScore","GameOverModal","Modal","centered","Header","closeButton","Title","Body","Footer","onHide","initialState","betInputIsValid","dealerHandHidden","currentDeck","gameOver","App","validateInput","text","RegExp","test","parseInt","state","betInputHandler","target","setState","submitBetHandler","previousState","getRandomCard","currentDeckCopy","randomNumber","length","cardName","splice","dealHand","calculatePlayerScore","newHand","push","newPlayerScore","playerAcesCount","forEach","includes","newDealerScore","dealerAcesCount","handOver","playDealerHand","newCard","console","log","resetHand","Navbar","bg","Brand","href","Container","textAlign","this","show","React","Component","ReactDOM","render","document","getElementById"],"mappings":"sRAAaA,EAAa,CACxBC,SAAU,EACVC,SAAU,GACVC,SAAU,EACVC,WAAY,EACZC,UAAW,EACXC,UAAW,EACXC,SAAU,EACVC,WAAY,EACZC,WAAY,EACZC,UAAW,EACXC,SAAU,GACVC,UAAW,GACXC,WAAY,GACZC,UAAW,GACXC,UAAW,GACXC,UAAW,EACXC,YAAa,EACbC,WAAY,EACZC,WAAY,EACZC,UAAW,EACXC,YAAa,EACbC,YAAa,EACbC,WAAY,EACZC,UAAW,GACXC,WAAY,GACZC,YAAa,GACbC,WAAY,GACZC,UAAW,GACXC,UAAW,EACXC,YAAa,EACbC,WAAY,EACZC,WAAY,EACZC,UAAW,EACXC,YAAa,EACbC,YAAa,EACbC,WAAY,EACZC,UAAW,GACXC,WAAY,GACZC,YAAa,GACbC,WAAY,GACZC,YAAa,GACbC,YAAa,EACbC,cAAe,EACfC,aAAc,EACdC,aAAc,EACdC,YAAa,EACbC,cAAe,EACfC,cAAe,EACfC,aAAc,EACdC,YAAa,GACbC,aAAc,GACdC,cAAe,GACfC,aAAc,IAGHC,EAAU,CACrB,WACA,WACA,aACA,YACA,YACA,WACA,aACA,aACA,YACA,WACA,YACA,aACA,YACA,YACA,YACA,cACA,aACA,aACA,YACA,cACA,cACA,aACA,YACA,aACA,cACA,aACA,YACA,YACA,cACA,aACA,aACA,YACA,cACA,cACA,aACA,YACA,aACA,cACA,aACA,cACA,cACA,gBACA,eACA,eACA,cACA,gBACA,gBACA,eACA,cACA,eACA,gBACA,eACA,WACA,WACA,aACA,YACA,YACA,WACA,aACA,aACA,YACA,WACA,YACA,aACA,YACA,YACA,YACA,cACA,aACA,aACA,YACA,cACA,cACA,aACA,YACA,aACA,cACA,aACA,YACA,YACA,cACA,aACA,aACA,YACA,cACA,cACA,aACA,YACA,aACA,cACA,aACA,cACA,cACA,gBACA,eACA,eACA,cACA,gBACA,gBACA,eACA,cACA,eACA,gBACA,gBAGWC,EAAO,CAAC,WAAY,YAAa,YAAa,e,gBC5J5CC,G,MAJF,SAACC,GACZ,OAA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","file":"static/js/main.6b31c91e.chunk.js","sourcesContent":["export const cardValues = {\n  cardBack: 0,\n  aceClubs: 11,\n  twoClubs: 2,\n  threeClubs: 3,\n  fourClubs: 4,\n  fiveClubs: 5,\n  sixClubs: 6,\n  sevenClubs: 7,\n  eightClubs: 8,\n  nineClubs: 9,\n  tenClubs: 10,\n  jackClubs: 10,\n  queenClubs: 10,\n  kingClubs: 10,\n  aceSpades: 11,\n  twoSpades: 2,\n  threeSpades: 3,\n  fourSpades: 4,\n  fiveSpades: 5,\n  sixSpades: 6,\n  sevenSpades: 7,\n  eightSpades: 8,\n  nineSpades: 9,\n  tenSpades: 10,\n  jackSpades: 10,\n  queenSpades: 10,\n  kingSpades: 10,\n  aceHearts: 11,\n  twoHearts: 2,\n  threeHearts: 3,\n  fourHearts: 4,\n  fiveHearts: 5,\n  sixHearts: 6,\n  sevenHearts: 7,\n  eightHearts: 8,\n  nineHearts: 9,\n  tenHearts: 10,\n  jackHearts: 10,\n  queenHearts: 10,\n  kingHearts: 10,\n  aceDiamonds: 11,\n  twoDiamonds: 2,\n  threeDiamonds: 3,\n  fourDiamonds: 4,\n  fiveDiamonds: 5,\n  sixDiamonds: 6,\n  sevenDiamonds: 7,\n  eightDiamonds: 8,\n  nineDiamonds: 9,\n  tenDiamonds: 10,\n  jackDiamonds: 10,\n  queenDiamonds: 10,\n  kingDiamonds: 10,\n};\n\nexport const newDeck = [\n  'aceClubs',\n  'twoClubs',\n  'threeClubs',\n  'fourClubs',\n  'fiveClubs',\n  'sixClubs',\n  'sevenClubs',\n  'eightClubs',\n  'nineClubs',\n  'tenClubs',\n  'jackClubs',\n  'queenClubs',\n  'kingClubs',\n  'aceSpades',\n  'twoSpades',\n  'threeSpades',\n  'fourSpades',\n  'fiveSpades',\n  'sixSpades',\n  'sevenSpades',\n  'eightSpades',\n  'nineSpades',\n  'tenSpades',\n  'jackSpades',\n  'queenSpades',\n  'kingSpades',\n  'aceHearts',\n  'twoHearts',\n  'threeHearts',\n  'fourHearts',\n  'fiveHearts',\n  'sixHearts',\n  'sevenHearts',\n  'eightHearts',\n  'nineHearts',\n  'tenHearts',\n  'jackHearts',\n  'queenHearts',\n  'kingHearts',\n  'aceDiamonds',\n  'twoDiamonds',\n  'threeDiamonds',\n  'fourDiamonds',\n  'fiveDiamonds',\n  'sixDiamonds',\n  'sevenDiamonds',\n  'eightDiamonds',\n  'nineDiamonds',\n  'tenDiamonds',\n  'jackDiamonds',\n  'queenDiamonds',\n  'kingDiamonds',\n  'aceClubs',\n  'twoClubs',\n  'threeClubs',\n  'fourClubs',\n  'fiveClubs',\n  'sixClubs',\n  'sevenClubs',\n  'eightClubs',\n  'nineClubs',\n  'tenClubs',\n  'jackClubs',\n  'queenClubs',\n  'kingClubs',\n  'aceSpades',\n  'twoSpades',\n  'threeSpades',\n  'fourSpades',\n  'fiveSpades',\n  'sixSpades',\n  'sevenSpades',\n  'eightSpades',\n  'nineSpades',\n  'tenSpades',\n  'jackSpades',\n  'queenSpades',\n  'kingSpades',\n  'aceHearts',\n  'twoHearts',\n  'threeHearts',\n  'fourHearts',\n  'fiveHearts',\n  'sixHearts',\n  'sevenHearts',\n  'eightHearts',\n  'nineHearts',\n  'tenHearts',\n  'jackHearts',\n  'queenHearts',\n  'kingHearts',\n  'aceDiamonds',\n  'twoDiamonds',\n  'threeDiamonds',\n  'fourDiamonds',\n  'fiveDiamonds',\n  'sixDiamonds',\n  'sevenDiamonds',\n  'eightDiamonds',\n  'nineDiamonds',\n  'tenDiamonds',\n  'jackDiamonds',\n  'queenDiamonds',\n  'kingDiamonds',\n];\n\nexport const aces = ['aceClubs', 'aceSpades', 'aceHearts', 'aceDiamonds'];\n","import React from 'react';\nimport '../Cards.css';\n\nconst Card = (props) => {\n  return <i className={props.card} />;\n};\n\nexport default Card;\n","import React from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport Card from './Card/Card';\n\nconst Cards = (props) => {\n  return (\n    <Row lg={8} style={{ padding: '0 0 20px 0' }}>\n      <Col>\n        {props.dealerHand.map((card) => (\n          <Card card={card} key={Math.floor(Math.random() * 1000000)} />\n        ))}\n      </Col>\n      <Col>\n        {props.playerHand.map((card) => (\n          <Card card={card} key={Math.floor(Math.random() * 1000000)} />\n        ))}\n      </Col>\n    </Row>\n  );\n};\n\nexport default Cards;\n","import React, { Fragment } from 'react';\nimport { Row, Col, Button, InputGroup, FormControl } from 'react-bootstrap';\n\nconst Bank = (props) => {\n  const style = { padding: '30px 0 0 0' };\n  return (\n    <Fragment>\n      <Row lg={{ span: 4, offset: 4 }} style={style}>\n        <Col>\n          <h2>Player Bank: ${props.playerBank}</h2>\n          <h2>Pot: ${props.currentPot}</h2>\n        </Col>\n      </Row>\n      <Row style={style}>\n        <Col lg={{ span: 4, offset: 4 }}>\n          <InputGroup size='lg'>\n            <InputGroup.Prepend>\n              <Button\n                variant={\n                  !props.isValid || props.currentPot > 0 || props.handDealt\n                    ? 'outline-success'\n                    : 'success'\n                }\n                onClick={props.submitBet}\n                disabled={!props.isValid || props.currentPot > 0 || props.handDealt}>\n                Place Bet\n              </Button>\n            </InputGroup.Prepend>\n            <FormControl\n              placeholder='You must place a bet...'\n              aria-label='Bet Amount'\n              value={props.betInput}\n              onChange={(event) => props.inputChangedHandler(event)}\n            />\n          </InputGroup>\n        </Col>\n      </Row>\n    </Fragment>\n  );\n};\n\nexport default Bank;\n","import React from 'react';\nimport { Row, Col, Button } from 'react-bootstrap';\n\nconst Controls = (props) => {\n  const buttonStyle = { margin: '10px 10px 0 0' };\n  return (\n    <Row style={{ padding: '20px 0 0 0' }}>\n      <Col lg={{ span: 6, offset: 3 }}>\n        <Button\n          style={buttonStyle}\n          size='lg'\n          variant={props.handDealt || props.currentPot <= 0 ? 'outline-primary' : 'primary'}\n          onClick={props.deal}\n          disabled={props.handDealt || props.currentPot <= 0}>\n          Deal Hand\n        </Button>\n        <Button\n          style={buttonStyle}\n          size='lg'\n          variant={!props.handDealt || props.playerStand ? 'outline-warning' : 'warning'}\n          onClick={props.hit}\n          disabled={!props.handDealt || props.playerStand}>\n          Hit\n        </Button>\n        <Button\n          style={buttonStyle}\n          size='lg'\n          variant={!props.handDealt || props.playerStand ? 'outline-success' : 'success'}\n          onClick={props.playDealer}\n          disabled={!props.handDealt || props.playerStand}>\n          Stand\n        </Button>\n        <Button\n          style={buttonStyle}\n          size='lg'\n          variant={props.dealerHidden ? 'outline-danger' : 'danger'}\n          onClick={props.reset}\n          disabled={props.dealerHidden}>\n          Clear Hand\n        </Button>\n      </Col>\n    </Row>\n  );\n};\n\nexport default Controls;\n","import React from 'react';\nimport './ResultsMessage.css';\nimport { Row, Col } from 'react-bootstrap';\n\nconst Message = (props) => {\n  let playerResult = null;\n  let dealerResult = null;\n  let playerStyle = null;\n  let dealerStyle = null;\n  if (props.playerBusted === true) {\n    playerResult = 'Player Busted!';\n    dealerResult = 'Dealer Won!';\n    playerStyle = 'Loser';\n    dealerStyle = 'Winner';\n  } else if (props.dealerBusted === true) {\n    playerResult = 'Player Won!';\n    dealerResult = 'Dealer Busted!';\n    playerStyle = 'Winner';\n    dealerStyle = 'Loser';\n  } else if (props.result === 'tied') {\n    playerResult = \"It's a Draw!\";\n    dealerResult = \"It's a Draw!\";\n    playerStyle = 'Tied';\n    dealerStyle = 'Tied';\n  } else if (props.result === 'player') {\n    playerResult = 'Player Won!';\n    dealerResult = 'Dealer Lost!';\n    playerStyle = 'Winner';\n    dealerStyle = 'Loser';\n  } else if (props.result === 'dealer') {\n    playerResult = 'Player Lost!';\n    dealerResult = 'Dealer Won!';\n    playerStyle = 'Loser';\n    dealerStyle = 'Winner';\n  } else {\n    playerResult = '.';\n    dealerResult = '.';\n    playerStyle = 'Hidden';\n    dealerStyle = 'Hidden';\n  }\n  return (\n    <Row lg={8}>\n      <Col className={dealerStyle}> {dealerResult} </Col>\n      <Col className={playerStyle}> {playerResult} </Col>\n    </Row>\n  );\n};\n\nexport default Message;\n","import React from 'react';\nimport { Row, Col } from 'react-bootstrap';\n\nconst Scores = (props) => {\n  return (\n    <Row lg={8}>\n      <Col>\n        <h2>Dealer Hand: {props.dealerHidden ? '🤷' : props.dealerScore}</h2>\n      </Col>\n      <Col>\n        <h2>Player Hand: {props.playerScore}</h2>\n      </Col>\n    </Row>\n  );\n};\n\nexport default Scores;\n","import React from 'react';\nimport { Modal, Button } from 'react-bootstrap';\n\nconst GameOverModal = (props) => {\n  return (\n    <Modal {...props} size='lg' centered>\n      <Modal.Header closeButton>\n        <Modal.Title>Game Over!</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <p>You have run out of money! Close this message to start over.</p>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={props.onHide}>Close</Button>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default GameOverModal;\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Navbar, Container } from 'react-bootstrap';\nimport { cardValues, newDeck, aces } from './components/Cards/deck';\nimport Cards from './components/Cards/Cards';\nimport Bank from './components/Bank/Bank';\nimport Controls from './components/Controls/Controls';\nimport ResultsMessage from './components/Results/ResultsMessage/ResultsMessage';\nimport Scores from './components/Results/Scores/Scores';\nimport GameOverModal from './components/Results/GameOver/GameOverModal';\n\nconst initialState = {\n  playerScore: 0,\n  dealerScore: 0,\n  playerBank: 500,\n  currentPot: 0,\n  betInput: '',\n  betInputIsValid: false,\n  playerHand: ['cardBack', 'cardBack'],\n  dealerHand: [],\n  dealerHandHidden: ['cardBack', 'cardBack'],\n  dealerHidden: true,\n  currentDeck: [...newDeck],\n  handDealt: false,\n  playerStand: false,\n  playerBusted: false,\n  dealerBusted: false,\n  result: '',\n  gameOver: false,\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = initialState;\n  }\n\n  validateInput = (text) => {\n    const regex = new RegExp('^\\\\d+$');\n    return regex.test(text) && parseInt(text) <= this.state.playerBank && parseInt(text) > 0;\n  };\n\n  betInputHandler = (event) => {\n    if (this.validateInput(event.target.value)) {\n      this.setState({ betInput: event.target.value, betInputIsValid: true });\n    } else {\n      this.setState({ betInput: event.target.value, betInputIsValid: false });\n    }\n  };\n\n  submitBetHandler = () => {\n    this.setState((previousState) => {\n      return {\n        currentPot: parseInt(previousState.betInput) * 2,\n        playerBank: (previousState.playerBank -= parseInt(previousState.betInput)),\n      };\n    });\n  };\n\n  getRandomCard = () => {\n    const currentDeckCopy = [...this.state.currentDeck];\n    const randomNumber = Math.floor(Math.random() * (currentDeckCopy.length - 1));\n    const cardName = currentDeckCopy[randomNumber];\n    currentDeckCopy.splice(randomNumber, 1);\n    this.setState({ currentDeck: currentDeckCopy });\n    return cardName;\n  };\n\n  dealHand = () => {\n    if (this.state.handDealt === true) {\n      return null;\n    }\n    const playerHand = [this.getRandomCard(), this.getRandomCard()];\n    const dealerHand = [this.getRandomCard(), this.getRandomCard()];\n    this.setState(\n      {\n        handDealt: true,\n        playerHand: playerHand,\n        dealerHand: dealerHand,\n      },\n      () => this.calculatePlayerScore()\n    );\n  };\n\n  hit = () => {\n    // If the hand isn't dealt yet we can't hit\n    if (this.state.handDealt === false) {\n      return null;\n    }\n    // Create a copy of the player's hand array from state\n    const newHand = [...this.state.playerHand];\n    // Push a new random card from the deck onto the player's hand\n    newHand.push(this.getRandomCard());\n    // Write the player's new hand to state and then calculate their new score\n    this.setState({ playerHand: newHand }, () => this.calculatePlayerScore());\n  };\n\n  calculatePlayerScore = () => {\n    let newPlayerScore = 0;\n    let playerAcesCount = 0;\n    // Loop through all cards in the player's hand\n    this.state.playerHand.forEach((card) => {\n      // Add each card value to the score\n      newPlayerScore += cardValues[card];\n      // Keep track of any Aces in the hand\n      if (aces.includes(card)) {\n        playerAcesCount++;\n      }\n      // If the player has Aces in their hand and they've \"busted\" (gone over score of 21), make the Ace count for 1 instead of 11 and remove the ace from the tracker.\n      if (newPlayerScore > 21 && playerAcesCount > 0) {\n        newPlayerScore -= 10;\n        playerAcesCount--;\n      }\n    });\n    // If the player has \"busted\" (score over 21), write the score to state and then call playerBusted(). In this scenario the dealer wins by default and does not need to play out their hand with playDealerHand() ).\n    if (newPlayerScore > 21) {\n      this.setState({ playerScore: newPlayerScore }, () => this.playerBusted());\n    }\n    // Otherwise, just write the new score to state.\n    else {\n      this.setState({ playerScore: newPlayerScore });\n    }\n  };\n\n  playerBusted = () => {\n    // The dealer doesn't need to play out their hand but this will calculate the score of their initial hand so we can at least display it.\n    let newDealerScore = 0;\n    let dealerAcesCount = 0;\n    this.state.dealerHand.forEach((card) => {\n      newDealerScore += cardValues[card];\n      if (aces.includes(card)) {\n        dealerAcesCount++;\n      }\n      if (newDealerScore > 21 && dealerAcesCount > 0) {\n        newDealerScore -= 10;\n        dealerAcesCount--;\n      }\n    });\n    this.setState(\n      {\n        playerBusted: true,\n        result: 'dealer',\n        dealerHidden: false,\n        dealerScore: newDealerScore,\n        playerStand: true,\n      },\n      () => this.handOver()\n    );\n  };\n\n  // When the player \"stands\" (finishes playing their hand) it's time for the dealer to play their hand. This is all dealer hit/stand logic.\n  playDealerHand = () => {\n    let newDealerScore = 0;\n    let dealerAcesCount = 0;\n    const newHand = [...this.state.dealerHand];\n    // Same score calculating and ace checking logic as in calculatePlayerScore() above. Calculates the score for the dealer's initial hand (two cards).\n    newHand.forEach((card) => {\n      newDealerScore += cardValues[card];\n      if (aces.includes(card)) {\n        dealerAcesCount++;\n      }\n      if (newDealerScore > 21 && dealerAcesCount > 0) {\n        newDealerScore -= 10;\n        dealerAcesCount--;\n      }\n    });\n    // Need to check each new card (hit) at a time to avoid looping within the while loop. As per blackjack rules, the dealer must hit if their score is below 17 and must stand once they reach at least 17.\n    while (newDealerScore < 17) {\n      const newCard = this.getRandomCard();\n      newHand.push(newCard);\n      newDealerScore += cardValues[newCard];\n      if (aces.includes(newCard)) {\n        dealerAcesCount++;\n      }\n      if (newDealerScore > 21 && dealerAcesCount > 0) {\n        newDealerScore -= 10;\n        dealerAcesCount--;\n      }\n    }\n    this.setState({ dealerHand: newHand, dealerScore: newDealerScore }, () => this.handOver());\n  };\n\n  handOver = () => {\n    if (this.state.playerScore === this.state.dealerScore) {\n      this.setState((previousState) => {\n        return {\n          result: 'tied',\n          playerBank: (previousState.playerBank += previousState.currentPot / 2),\n        };\n      });\n    } else if (this.state.playerScore > 21) {\n      this.setState({ result: 'dealer', playerBusted: true });\n    } else if (this.state.dealerScore > 21) {\n      this.setState((previousState) => {\n        return {\n          result: 'player',\n          dealerBusted: true,\n          playerBank: (previousState.playerBank += previousState.currentPot),\n        };\n      });\n    } else if (this.state.playerScore > this.state.dealerScore) {\n      this.setState((previousState) => {\n        return {\n          result: 'player',\n          playerBank: (previousState.playerBank += previousState.currentPot),\n        };\n      });\n    } else if (this.state.playerScore < this.state.dealerScore) {\n      this.setState({ result: 'dealer' });\n    } else {\n      console.log('Something went wrong');\n    }\n    this.setState({ dealerHidden: false, playerStand: true, currentPot: 0 });\n  };\n\n  // TODO Add logic to maintain the state of the deck instead of completely resetting it every hand.\n  resetHand = () => {\n    let gameOver = false;\n    if (this.state.playerBank === 0) {\n      gameOver = true;\n    }\n    this.setState((previousState) => {\n      return {\n        playerScore: 0,\n        dealerScore: 0,\n        currentPot: 0,\n        betInputIsValid: this.validateInput(previousState.betInput),\n        playerHand: ['cardBack', 'cardBack'],\n        dealerHand: [],\n        dealerHandHidden: ['cardBack', 'cardBack'],\n        dealerHidden: true,\n        currentDeck: [...newDeck],\n        handDealt: false,\n        playerStand: false,\n        playerBusted: false,\n        dealerBusted: false,\n        result: '',\n        gameOver: gameOver,\n      };\n    });\n  };\n\n  render() {\n    return (\n      <div className='App'>\n        <Navbar bg='dark' variant='dark' className='justify-content-center'>\n          <Navbar.Brand href='/'>\n            <h2>Let's Play Blackjack!</h2>\n          </Navbar.Brand>\n        </Navbar>\n        <Container style={{ textAlign: 'center' }}>\n          {this.state.gameOver ? (\n            <GameOverModal show={this.state.gameOver} onHide={() => this.setState(initialState)} />\n          ) : null}\n          <ResultsMessage\n            result={this.state.result}\n            playerBusted={this.state.playerBusted}\n            dealerBusted={this.state.dealerBusted}\n          />\n          <Cards\n            dealerHand={\n              this.state.dealerHidden ? this.state.dealerHandHidden : this.state.dealerHand\n            }\n            playerHand={this.state.playerHand}\n          />\n          <Scores\n            dealerHidden={this.state.dealerHidden}\n            dealerScore={this.state.dealerScore}\n            playerScore={this.state.playerScore}\n          />\n          <Bank\n            playerBank={this.state.playerBank}\n            currentPot={this.state.currentPot}\n            betInput={this.state.betInput}\n            isValid={this.state.betInputIsValid}\n            handDealt={this.state.handDealt}\n            inputChangedHandler={this.betInputHandler}\n            submitBet={this.submitBetHandler}\n          />\n          <Controls\n            handDealt={this.state.handDealt}\n            currentPot={this.state.currentPot}\n            playerStand={this.state.playerStand}\n            dealerHidden={this.state.dealerHidden}\n            deal={this.dealHand}\n            hit={this.hit}\n            reset={this.resetHand}\n            playDealer={this.playDealerHand}\n          />\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}